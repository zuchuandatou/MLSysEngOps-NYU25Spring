---
- name: Post-Install kubectl Setup
  hosts: node1,node2
  become: yes
  vars:
    ansible_user: cc
  tasks:
    - name: Ensure .kube directory exists
      file:
        path: "/home/{{ ansible_user }}/.kube"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Copy admin.conf to user's kubeconfig
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "/home/{{ ansible_user }}/.kube/config"
        remote_src: yes
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'

    - name: Run kubectl get nodes as cc
      command: kubectl get nodes
      become_user: "{{ ansible_user }}"
      register: kubectl_output

    - name: Show kubectl get nodes output
      debug:
        msg: "{{ kubectl_output.stdout_lines }}"

- name: Add User to Docker Group
  hosts: node1,node2,node3
  become: yes

  vars:
    insecure_registry: "registry.kube-system.svc.cluster.local:5000"

  tasks:

    - name: Add user 'cc' to docker group
      user:
        name: cc
        groups: docker
        append: yes

    - name: Restart Docker
      systemd:
        name: docker
        state: restarted
        enabled: yes

    - name: Verify Docker group membership for user 'cc'
      command: id cc
      register: cc_id

    - name: Show user groups
      debug:
        msg: "{{ cc_id.stdout }}"

- name: Setup Kubernetes Dashboard
  hosts: node1
  become: yes
  tasks:
    - name: Create dashboard admin-user and RBAC
      shell: |
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: admin-user
          namespace: kube-system
        ---
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: admin-user
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: cluster-admin
        subjects:
        - kind: ServiceAccount
          name: admin-user
          namespace: kube-system
        EOF
      args:
        executable: /bin/bash

    - name: Wait for Kubernetes Dashboard pod to be running
      shell: |
        kubectl get pods -n kube-system -l k8s-app=kubernetes-dashboard -o jsonpath='{.items[0].status.phase}'
      register: dashboard_status
      retries: 10
      delay: 10
      until: dashboard_status.stdout == "Running"

    - name: Create token for dashboard access
      shell: |
        kubectl -n kube-system create token admin-user
      register: dashboard_token
      changed_when: false

    - name: Display dashboard token
      debug:
        msg: "Dashboard token: {{ dashboard_token.stdout }}"

- name: Configure DNS and Restart CoreDNS
  hosts: node1,node2,node3
  become: yes
  tasks:
    - name: Set DNS for interface ens4
      command: resolvectl dns ens4 127.0.0.1

- name: Restart CoreDNS on node1
  hosts: node1
  become: yes
  tasks:
    - name: Restart CoreDNS deployment
      command: kubectl -n kube-system rollout restart deployment coredns

- name: Install ArgoCD CLI
  hosts: node1
  become: yes
  tasks:
    - name: Download ArgoCD CLI binary
      get_url:
        url: "https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64"
        dest: "/usr/local/bin/argocd"
        mode: '0755'

    - name: Verify ArgoCD CLI installation
      command: argocd version --client
      register: argocd_version
      ignore_errors: yes

    - name: Show ArgoCD version
      debug:
        msg: "{{ argocd_version.stdout_lines }}"

- name: Get ArgoCD admin password
  hosts: node1
  become: yes
  tasks:
    - name: Fetch ArgoCD initial admin password
      shell: |
        kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 --decode
      register: argocd_admin_password
      changed_when: false

    - name: Show ArgoCD admin password
      debug:
        msg: "ArgoCD admin password: {{ argocd_admin_password.stdout }}"

- name: Install Argo Workflows
  hosts: node1
  become: yes
  tasks:
    - name: Create argo namespace
      command: kubectl create namespace argo
      register: argo_ns
      failed_when: argo_ns.rc != 0 and 'AlreadyExists' not in argo_ns.stderr
      changed_when: "'created' in argo_ns.stdout.lower()"

    - name: Install Argo Workflows
      shell: |
        kubectl apply -n argo -f https://github.com/argoproj/argo-workflows/releases/download/v3.6.5/quick-start-minimal.yaml
      args:
        executable: /bin/bash

- name: Install Argo Events
  hosts: node1
  become: yes
  tasks:
    - name: Create argo-events namespace
      command: kubectl create namespace argo-events
      register: argo_events_ns
      failed_when: argo_events_ns.rc != 0 and 'AlreadyExists' not in argo_events_ns.stderr
      changed_when: "'created' in argo_events_ns.stdout.lower()"

    - name: Install Argo Events
      shell: |
        kubectl apply -n argo-events -f https://github.com/argoproj/argo-events/releases/download/v1.9.6/install.yaml
      args:
        executable: /bin/bash

- name: Copy ArgoCD admin secret to Argo Workflows namespace
  hosts: node1
  become: yes
  vars:
    source_namespace: argocd
    target_namespace: argo
    secret_name: argocd-initial-admin-secret

  tasks:
    - name: Get ArgoCD admin secret YAML
      command: >
        kubectl get secret {{ secret_name }} -n {{ source_namespace }} -o yaml
      register: secret_yaml

    - name: Modify namespace in secret YAML
      set_fact:
        updated_secret_yaml: >-
          {{ secret_yaml.stdout
            | regex_replace('namespace: .*', 'namespace: ' ~ target_namespace)
            | regex_replace('  resourceVersion: .*', '')
            | regex_replace('  uid: .*', '')
            | regex_replace('  creationTimestamp: .*', '') }}

    - name: Apply secret to target namespace
      shell: |
        echo "{{ updated_secret_yaml }}" | kubectl apply -n {{ target_namespace }} -f -
      register: apply_result

    - name: Show apply result
      debug:
        var: apply_result.stdout

- name: Disable IPv6 on all and default interfaces
  hosts: all
  become: true
  tasks:

    - name: Create sysctl config to disable IPv6
      copy:
        dest: /etc/sysctl.d/99-disable-ipv6.conf
        content: |
          net.ipv6.conf.ens3.disable_ipv6 = 1
        owner: root
        group: root
        mode: '0644'

    - name: Apply sysctl settings immediately
      command: sysctl --system
