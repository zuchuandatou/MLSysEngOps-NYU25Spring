
---
- name: Deploy MLflow platform via ArgoCD & Helm with MinIO secret handling
  hosts: node1
  become: yes
  vars:
    argocd_username: "admin"
    repo_path: "https://github.com/zuchuandatou/mlops-iac.git"
    app_name: "gourmetgram-platform"
    app_path: "k8s/platform"
    minio_access_key: "your-access-key"

  tasks:
    - name: Get ArgoCD admin password from Kubernetes secret
      command: >
        kubectl get secret -n argocd argocd-initial-admin-secret \
        -o jsonpath="{.data.password}"
      register: argocd_password_base64

    - name: Decode ArgoCD admin password
      shell: echo {{ argocd_password_base64.stdout }} | base64 --decode
      register: argocd_password

    - name: Log in to ArgoCD
      command: >
        argocd login localhost --username {{ argocd_username }} \
        --password "{{ argocd_password.stdout }}" --grpc-web --port-forward --port-forward-namespace=argocd
      register: login_result
      changed_when: false

    - name: Add repository to ArgoCD
      command: >
        argocd repo add {{ repo_path }} --port-forward --port-forward-namespace=argocd
      register: repo_result
      changed_when: "'Repository already exists' not in repo_result.stderr"

    - name: Detect external IP starting with 10.56
      set_fact:
        external_ip: "{{ ansible_all_ipv4_addresses | select('match', '^10\\.56\\..*') | list | first }}"

    - name: Ensure gourmetgram-platform namespace exists
      command: kubectl get namespace gourmetgram-platform
      register: ns_check
      failed_when: false
      changed_when: false

    - name: Create gourmetgram-platform namespace if missing
      when: ns_check.rc != 0
      command: kubectl create namespace gourmetgram-platform

    - name: Check if MinIO secret already exists
      command: kubectl get secret minio-credentials -n gourmetgram-platform
      register: minio_secret_check
      failed_when: false
      changed_when: false

    - name: Generate MinIO secret key
      when: minio_secret_check.rc != 0
      set_fact:
        minio_secret_key: "{{ lookup('password', '/dev/null length=20 chars=ascii_letters,digits') }}"

    - name: Create MinIO credentials secret
      when: minio_secret_check.rc != 0
      command: >
        kubectl create secret generic minio-credentials
        --namespace gourmetgram-platform
        --from-literal=accesskey={{ minio_access_key }}
        --from-literal=secretkey={{ minio_secret_key }}
      register: minio_secret_create

    - name: Get existing MinIO secret key if already exists
      when: minio_secret_check.rc == 0
      command: >
        kubectl get secret minio-credentials -n gourmetgram-platform -o jsonpath="{.data.secretkey}"
      register: existing_secret_b64

    - name: Decode existing MinIO secret key
      when: minio_secret_check.rc == 0
      set_fact:
        minio_secret_key: "{{ existing_secret_b64.stdout | b64decode }}"

    - name: Check if ArgoCD application exists
      command: >
        argocd app get {{ app_name }} --port-forward --port-forward-namespace=argocd
      register: app_check
      failed_when: false
      changed_when: false

    - name: Create ArgoCD Helm application if it does not exist
      when: app_check.rc != 0
      command: >
        argocd app create {{ app_name }} \
        --repo {{ repo_path }} \
        --path {{ app_path }} \
        --dest-server https://kubernetes.default.svc \
        --dest-namespace "" \
        --helm-set-string minio.externalIP={{ external_ip }} \
        --helm-set-string mlflow.externalIP={{ external_ip }} \
        --helm-set-string prometheus.externalIP={{ external_ip }} \
        --helm-set-string grafana.externalIP={{ external_ip }} \
        --port-forward --port-forward-namespace=argocd \
        --sync-policy automated --self-heal
      register: app_create

    - name: Update ArgoCD Helm application if it exists
      when: app_check.rc == 0
      command: >
        argocd app set {{ app_name }} \
        --dest-namespace "" \
        --helm-set-string minio.externalIP={{ external_ip }} \
        --helm-set-string mlflow.externalIP={{ external_ip }} \
        --helm-set-string prometheus.externalIP={{ external_ip }} \
        --helm-set-string grafana.externalIP={{ external_ip }} \
        --port-forward --port-forward-namespace=argocd
      register: app_update

    - name: Display MinIO credentials
      debug:
        msg: |
          MinIO Access Key: {{ minio_access_key }}
          MinIO Secret Key: {{ minio_secret_key }}
